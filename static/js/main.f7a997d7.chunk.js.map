{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["commas","breakpoints","createBreakpoints","theme","createMuiTheme","overrides","MuiTypography","h1","Object","defineProperty","fontSize","pxToRem","up","h3","h4","App","state","number","Decimal","clicks","speed","cost","lastClick","Date","getTime","numberAtLastClick","_this2","this","setTimeout","localStorage","getItem","setState","getSpeed","getCost","setInterval","getNumber","setItem","toPower","minus","Math","ceil","times","updateSpeed","plus","_this3","react_default","a","createElement","className","CssBaseline_default","styles","Grid_default","container","direction","justify","alignItems","style","height","item","Typography_default","variant","component","greaterThan","toFixed","replace","gutterBottom","xs","Button_default","size","color","onClick","clickButton","disabled","lessThan","Component","words","prefixes","suffixes","i","u","push","value","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7a997d7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Decimal } from 'decimal.js';\nimport 'typeface-roboto';\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\nimport createBreakpoints from \"@material-ui/core/styles/createBreakpoints\";\n\nconst commas = /\\B(?=(\\d{3})+(?!\\d))/g;\nconst breakpoints = createBreakpoints({});\nconst theme = createMuiTheme({\n  breakpoints,\n  overrides: {\n    MuiTypography: {\n      h1: {\n        fontSize: pxToRem(50),\n        [breakpoints.up(\"sm\")]: {\n          fontSize: pxToRem(100)\n        }\n      },\n      h3: {\n        fontSize: pxToRem(30),\n        [breakpoints.up(\"sm\")]: {\n          fontSize: pxToRem(45)\n        }\n      },\n      h4: {\n        fontSize: pxToRem(28),\n        [breakpoints.up(\"sm\")]: {\n          fontSize: pxToRem(33)\n        }\n      }\n    }\n  }\n});\n\nclass App extends Component {\n\n  state = {\n    number: new Decimal(0),\n    clicks: 0,\n    speed: new Decimal(0),\n    cost: new Decimal(0),\n    lastClick: new Date().getTime(),\n    numberAtLastClick: new Decimal(0)\n  }\n\n  componentWillMount() {\n    setTimeout(() => {\n      let clicks = localStorage.getItem(\"clicks\");\n      clicks = clicks === null ? 0 : clicks;\n      let lastClick = localStorage.getItem(\"lastClick\")\n      lastClick = lastClick === null ? new Date().getTime() : lastClick;\n      let numberAtLastClick = localStorage.getItem(\"numberAtLastClick\")\n      numberAtLastClick = numberAtLastClick === null ? 0 : numberAtLastClick;\n      this.setState({\n        clicks: +clicks,\n        lastClick: +lastClick,\n        numberAtLastClick: new Decimal(numberAtLastClick),\n        speed: this.getSpeed(clicks),\n        cost: this.getCost(clicks)\n      })\n    });\n    setInterval(() => {\n      this.setState({\n        number: this.getNumber()\n      })\n    }, 50);\n    setInterval(() => {\n      localStorage.setItem(\"lastClick\", this.state.lastClick);\n      localStorage.setItem(\"numberAtLastClick\", this.state.numberAtLastClick);\n      localStorage.setItem(\"clicks\", this.state.clicks);\n    }, 500)\n  }\n\n  updateSpeed(clicks) {\n    this.setState({\n      speed: this.getSpeed(clicks),\n      cost: this.getCost(clicks),\n      clicks: clicks\n    });\n  }\n\n  getSpeed(clicks) {\n    return new Decimal(2.5).toPower((clicks) * 0.1).minus(0.9)\n  }\n\n  getCost(clicks) {\n    return new Decimal(Math.ceil(clicks / 10)).times(this.getSpeed(clicks)).times(3)\n  }\n\n  clickButton() {\n    this.setState({\n      numberAtLastClick: this.getNumber().minus(this.getCost(this.state.clicks)),\n      lastClick: new Date().getTime()\n    });\n    this.updateSpeed(this.state.clicks + 1);\n  }\n\n  getNumber() {\n    return this.state.numberAtLastClick.plus(this.state.speed.times((new Date().getTime() - this.state.lastClick) / 1000))\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <CssBaseline />\n          <MuiThemeProvider theme={theme}>\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" style={{ height: \"100%\" }}>\n              <Grid item>\n                <Typography variant=\"h3\" className=\"reponsiveFont\">\n                  NUMBER\n            </Typography>\n                <Typography component=\"h2\" variant=\"h1\">\n                  {this.state.number.greaterThan(100) ? this.state.number.toFixed(0).replace(commas, \",\") : this.state.number.toFixed(2)}\n                </Typography>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  {\n                    //format(+this.state.number)\n                  }\n                </Typography>\n                <Typography variant=\"h3\">\n                  NUMBER GO UP SPEED\n             </Typography>\n                <Typography component=\"h2\" variant=\"h1\">\n                  {this.state.speed.greaterThan(100) ? this.state.speed.toFixed(0).replace(commas, \",\") : this.state.speed.toFixed(2)}\n                </Typography>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  {\n                    //format(+this.state.speed)\n                  }\n                </Typography>\n              </Grid>\n              <Grid item xs={2}></Grid>\n              <Grid item>\n                <Button variant=\"contained\" size=\"large\" color=\"primary\" onClick={() => this.clickButton()} disabled={this.state.number.lessThan(this.state.cost)} style={{ fontSize: \"2em\" }}>\n                  Make number go up faster\n            </Button>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  {this.state.number.lessThan(this.state.cost) ? \"(not enough number)\" : \" \"}\n                </Typography>\n                <Typography variant=\"h4\">\n                  COST: {this.state.cost.greaterThan(100) ? this.state.cost.toFixed(0).replace(commas, \",\") : this.state.cost.toFixed(2)} NUMBER\n            </Typography>\n              </Grid>\n            </Grid>\n            <footer>\n              <Typography variant=\"overline\" gutterBottom style={{color: \"grey\"}}>\n               2018 — made with ❤ by quantum development\n              </Typography>\n            </footer>\n          </MuiThemeProvider>\n        </div>\n    );\n  }\n}\n\n\nexport default App;\n\nconst words = [' thousand', ' million', ' billion', ' trillion', ' quadrillion', ' quintillion', ' sextillion', ' septillion', ' octillion', ' nonillion'];\nconst prefixes = ['', 'un', 'duo', 'tre', 'quattuor', 'quin', 'sex', 'septen', 'octo', 'novem'];\nconst suffixes = ['decillion', 'vigintillion', 'trigintillion', 'quadragintillion', 'quinquagintillion', 'sexagintillion', 'septuagintillion', 'octogintillion', 'nonagintillion'];\nfor (let i in suffixes) {\n  for (let u in prefixes) {\n    words.push(' ' + prefixes[u] + suffixes[i]);\n  }\n}\n\nfunction format(value) {\n  if (value < 1000) {\n    return \"\";\n  }\n  let base = 0,\n    notationValue = '';\n  if (!isFinite(value)) return 'Infinity';\n  if (value >= 1000000) {\n    value /= 1000;\n    while (Math.round(value) >= 1000) {\n      value /= 1000;\n      base++;\n    }\n    if (base >= words.length) { return 'Infinity'; } else { notationValue = words[base]; }\n  }\n  return new Decimal(value).toFixed(1) + notationValue;\n};\n\nfunction pxToRem(value) {\n  return `${value / 16}rem`;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}